{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"att",
				"att4ck"
			],
			[
				"ran",
				"randint"
			],
			[
				"T",
				"TpC"
			],
			[
				"a",
				"att4ck"
			],
			[
				"man",
				"manganellate"
			],
			[
				"con",
				"constitution"
			],
			[
				"de",
				"dexterity"
			],
			[
				"str",
				"strength"
			],
			[
				"Q",
				"QtGui"
			],
			[
				"rand",
				"randint"
			],
			[
				"s",
				"strength"
			],
			[
				"Qt",
				"QtGui"
			],
			[
				"window",
				"Window"
			],
			[
				"ed",
				"edge_color"
			],
			[
				"fit",
				"fit_param"
			],
			[
				"X",
				"x_log"
			],
			[
				"time",
				"time_log"
			],
			[
				"cl",
				"clustersizefile"
			],
			[
				"clu",
				"clustering"
			],
			[
				"fig",
				"fig5"
			],
			[
				"l",
				"lunghezze"
			],
			[
				"x",
				"x"
			],
			[
				"ch",
				"choices2"
			],
			[
				"cho",
				"choice"
			],
			[
				"re",
				"result"
			],
			[
				"ne",
				"Nephero_counter"
			],
			[
				"rn",
				"randint"
			],
			[
				"no",
				"nodeColor"
			],
			[
				"nu",
				"numberWords"
			],
			[
				"di",
				"differentWords"
			],
			[
				"cls",
				"clustering"
			],
			[
				"see",
				"seentimes"
			],
			[
				"seen",
				"seentimese"
			],
			[
				"nam",
				"namegiving"
			],
			[
				"name",
				"name"
			],
			[
				"sp",
				"speaker"
			],
			[
				"run",
				"runsNw"
			],
			[
				"runs",
				"runsNw"
			],
			[
				"n",
				"numberofcolors"
			],
			[
				"node",
				"nodeColor"
			],
			[
				"as",
				"as_cmap"
			],
			[
				"nod",
				"nodeColor"
			],
			[
				"Ne",
				"Nephero_counter"
			],
			[
				"fa",
				"faliures"
			],
			[
				"success",
				"success_counter"
			],
			[
				"top",
				"topology"
			],
			[
				"ave",
				"averageNw"
			],
			[
				"su",
				"sumNDW"
			],
			[
				"ti",
				"tipo"
			],
			[
				"sum",
				"sum_number_final"
			],
			[
				"num",
				"numberofWords"
			],
			[
				"hea",
				"hearer_number_final"
			],
			[
				"sho",
				"SHOW"
			],
			[
				"pos",
				"positions"
			],
			[
				"li",
				"listOfPositions"
			],
			[
				"po",
				"positions"
			],
			[
				"y",
				"y"
			],
			[
				"lis",
				"listPositions"
			],
			[
				"list",
				"listOfValues"
			],
			[
				"lisofpon",
				"listofpointsx"
			],
			[
				"len",
				"length"
			],
			[
				"remov",
				"remove_nodes_from"
			],
			[
				"remo",
				"removinglist"
			],
			[
				"CO",
				"COMUNI"
			],
			[
				"G",
				"G"
			],
			[
				"f",
				"f"
			],
			[
				"ma",
				"maxes"
			],
			[
				"la",
				"lastY1"
			],
			[
				"max",
				"maxY5"
			],
			[
				"edg",
				"edgeWeights"
			],
			[
				"ndw",
				"ndw"
			],
			[
				"np",
				"np"
			],
			[
				"ND",
				"NDW2"
			],
			[
				"fo",
				"Folk"
			],
			[
				"We",
				"WEIGHTED"
			],
			[
				"choice",
				"choice"
			],
			[
				"BINS",
				"BINS"
			],
			[
				"del",
				"deltaH"
			],
			[
				"item",
				"itemgetter"
			],
			[
				"le",
				"length"
			],
			[
				"file",
				"files"
			],
			[
				"He",
				"HEIGHT"
			],
			[
				"lo",
				"listOfNodes"
			],
			[
				"e",
				"edge"
			],
			[
				"for",
				"for\tFor Loop"
			],
			[
				"map",
				"mapInfo"
			],
			[
				"lin",
				"listOfNodes"
			],
			[
				"get",
				"getallHeights"
			],
			[
				"ps",
				"positionFromIndex"
			],
			[
				"the",
				"theFile"
			],
			[
				"listOf",
				"listOfPos"
			],
			[
				"lit",
				"listOfNodes"
			],
			[
				"c",
				"coarsnes"
			],
			[
				"BARA",
				"BARABASI_M"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/donrog/personal_python/RoamTry.py",
			"settings":
			{
				"buffer_size": 4345,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "NG.py",
			"settings":
			{
				"buffer_size": 1460,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import random\nimport networkx as nx\nfrom math import sqrt\nimport matplotlib.pyplot as plt\nfrom networkx.drawing.nx_agraph import graphviz_layout\nimport numpy as np\nfrom matplotlib import style\nimport matplotlib.cm as cm\nimport cPickle as pk\n\nimport gridItalia as gi\n\n\nCOMPLETE = 0\nERDOS    = 1; ERDOS_p = 0.5\nGRID2D   = 2\nGRID2DBAND = 3\nGRID2DBAND_p = 0.0001\nBARABASI = 4; BARABASI_M = 4\nGRIDONMAP = 5\nSHOW = 0\nWEIGHTED = 1\nDEBUG = 0\n\n\nclass Agent():\n\t'''\n\tBoth speaker and Hearer are reppresented by this agent class.\n\t'''\n\n\tnw = 0 # max id of different words\n\twords = [] # occurrences of single words in the population\n\tndw = 0 # nr of different words\n\t\n\tdef __init__(self, id=0):\n\t\t'''\n\t\tinitializes the class\n\t\t'''\n\n\t\tself.dict = []\n\t\tself.id = id\n\t\n\tdef __str__(self):\n\t\t'''\n\t\tDefnies what to print when asked\n\t\t'''\n\n\t\treturn (\"ID:\" + str(self.id)+ \" L:\" + str(len(self.dict)) + \n\t\t\t\" D:\"+str(self.dict))\n\t\n\tdef NewWord(self):\n\t\t'''\n\t\tThe invention procedure for the speaker\n\t\t'''\n\n\t\tw = Agent.nw\n\t\tAgent.words.append(0) # a new word occurs at last position: create slot\n\t\tif DEBUG: \n\t\t\tprint \"### NewWord: w:%d d:%s\" % (w,str(Agent.words))\n\t\tAgent.nw += 1\n\t\treturn w\n\t\n\tdef AddWord(self, w):\n\t\t'''\n\t\tAdds word w to the dictionary of agent self\n\t\t'''\n\n\t\tself.dict.append(w)\n\t\tif DEBUG:\n\t\t\tprint \"*** AddWord:\", w, \" |words|=\", len(Agent.words)\n\t\tAgent.words[w] += 1\n\t\tif(Agent.words[w]==1):\n\t\t\tAgent.ndw += 1\n\t\treturn w\n\t\n\tdef EraseDict(self):\n\t\t'''\n\t\tSelf removes all words from his dictionary\n\t\t'''\n\n\t\tfor i in self.dict:\n\t\t\tAgent.words[i] -= 1\n\t\t\tif(Agent.words[i]==0):\n\t\t\t\tAgent.ndw -= 1\n\t\tself.dict = []\n\n\tdef ChooseWord(self):\n\t\t'''\n\t\tProcedure for self to chose a word to communicate to the hearer\n\t\t'''\n\n\t\tif(self.dict):\n\t\t\treturn random.choice(self.dict)\n\t\telse:\n\t\t\treturn 999999\n\n\tdef RemoveWord(self, w):\n\t\t'''\n\t\tRemove occurrences of w in self's dictionary\n\t\t'''\n\n\t\twhile(w in self.dict):\n\t\t\tself.dict.remove(w)\n\t\t\tAgent.words[w] -= 1\n\n\nclass Folk():\n\t'''\n\tThe classe defines all properties of the population system:\n\tIt includes all the agents, the topology, and selection procedures.\n\t'''\n\n\tdef __init__(self, N=10, topology=0, choice = 1, Beta = 0.1, sparse = 0):\n\t\t'''\n\t\tInitialization routine for Folk\n\t\t'''\n\n\t\tself.N = N\n\t\tself.agent = []\n\t\tfor i in range(N):\n\t\t\tself.agent.append(Agent(i))\n\t\tself.topology = Topology(self.agent, topology, choice, Beta, sparse)\n\n\tdef __str__(self):\n\t\t'''\n\t\tRoutine defining what to print when asked for folk\n\t\t'''\n\n\t\tag = self.agent[0]\n\t\ts = (\"# Ndw:\" + str(ag.ndw) + \" Nw:\" + str(ag.nw) + \" Words:\" \n\t\t\t+ str(ag.words)+\"\\n\")\n\t\tfor i in range(len(self.agent)):\n\t\t\ts += \"# \"+str(self.agent[i]) + \"\\n\"\n\t\treturn s\n\n\tdef EraseAll(self):\n\t\t'''\n\t\tErases all words in all dictionaries\n\t\t'''\n\n\t\tag = self.ag ent[0]\n\t\tfor i in range(len(self.agent)):\n\t\t\tself.agent[i].EraseDict()\n\t\tag.nw = ag.ndw = 0\n\t\tag.words = []\n\n\tdef Select(self):\n\t\treturn self.topology.Select(self.agent)\n\t\t#return random.sample(self.agent, 2)\n\n\nclass Topology():\n\t'''\n\tDefines the topology class that determines connections between agents,\n\thow to select agent couples and the properties of the links\n\t'''\n\n\tdef __init__(self, agent, id=COMPLETE, choice=1, Beta=0.1, sparse=0):\n\t\tself.tipo = id\n\t\tif id != COMPLETE:\n\t\t\t#competelly connected topology (mean field case)\n\t\t\tN = len(agent)\n\t\t\n\t\tif id == ERDOS:\n\t\t\t#A random erdos-renyi graph with probabilitt ERDOS_P\n\t\t\tself.G = nx.erdos_renyi_graph(N, ERDOS_p)\n\t\t\n\t\telif id == BARABASI:\n\t\t\t#A barabasy-albert social network graph with power M\n\t\t\tself.G = nx.barabasi_albert_graph(N, BARABASI_M)\n\t\t\n\t\telif id == GRID2D:\n\t\t\tL = sqrt(N)\n\t\t\tif (int(L) != L):\n\t\t\t\traise Exception(\"Number of Agents is not a square number\")\n\t\t\tself.G = nx.grid_2d_graph(int(L),int(L),True)\n\t\t\n\t\telif id == GRID2DBAND:\n\t\t\t#A 2d lattice witha centrall barrier\n\t\t\tL = sqrt(N)\n\t\t\tif (int(L) != L):\n\t\t\t\traise Exception(\"Number of Agents is not a square number\")\n\t\t\tself.G = nx.grid_2d_graph(int(L),int(L),False)\n\t\t\tEdge_list = self.G.edges()\n\t\t\tmiddle = int(L/2)\n\t\t\tfor a in Edge_list:\n\t\t\t\tif (a[0][0]==middle and a[1][0]==middle+1) or (a[1][0]==middle \n\t\t\t\t\tand a[0][0]==middle+1):\n\t\t\t\t\tself.G[a[0]][a[1]]['weight'] = GRID2DBAND_p\n\t\t\t\telse:\n\t\t\t\t\tself.G[a[0]][a[1]]['weight'] = 1.0\n\t\t\n\t\telif id == GRIDONMAP:\n\t\t\t#A 2d lattice with weighted links derived from the morphology of \n\t\t\t#the map (normally the italian map)\n\t\t\tnodeColor = []\n\t\t\tlisofrelevantsizes = [i*i*30 for i in range(1,30) if i*i < 10000]\n\t\t\tif N not in lisofrelevantsizes:\n\t\t\t\tprint (\"the number of agents doesn't fit the grid, changing\"\n\t\t\t\t\t\" to closest possibility\\n\")\n\t\t\t\tN = min(lisofrelevantsizes, key=lambda x:abs(x-N))\n\t\t\t\tprint \"the closest number is: \" + str(N) + \"\\n\"\n\t\t\tfilename = \"files/topolgy\" + str(N) + \".pk\"\n\t\t\twith open(filename, 'rb') as input:\n\t\t\t\tself.G = pk.load(input)\n\t\t\t\n\t\t\tif sparse == True:\n\t\t\t\t#Creates a grid with the same histogram of frequency for\n\t\t\t\t#altitude as italian Comuni\n\t\t\t\tvalues = []\n\t\t\t\tremovinglist = []\n\t\t\t\twith open('Comuni_altitudine','r') as file:\n\t\t\t\t\tfor n, line in enumerate(file):\n\t\t\t\t\t\tif n != 0:\n\t\t\t\t\t\t\tvalues.append(int(line.split('\\t')[1]))\n\t\t\t\taltitudini = np.array(values)\n\t\t\t\tlookup = {}\n\t\t\t\thist, bins = np.histogram(altitudini, bins=50, normed=1)\n\t\t\t\tnorm = hist.max()\n\t\t\t\tfor tupla in zip(*np.histogram(altitudini, bins=50, normed=1)):\n\t\t\t\t\tlookup[tupla[1]] = tupla[0]/norm\n\t\t\t\tfor node in self.G.nodes():\n\t\t\t\t\tx = np.random.uniform()\n\t\t\t\t\ty = self.G.node[node]['height']\n\t\t\t\t\tfreq = lookup[min(list(lookup.keys()),\n\t\t\t\t\t\tkey=lambda x:abs(x-y))]\n\t\t\t\t\tif x > freq:\n\t\t\t\t\t\tremovinglist.append(node)\n\t\t\t\tself.G.remove_nodes_from(removinglist)\n\n\t\t\tif choice == WEIGHTED:\n\t\t\t\t#Assignes weight to the links based on their position\n\t\t\t\tfor edge in self.G.edges():\n\t\t\t\t\tself.G[edge[0]][edge[1]]['weight'] = (2.7 \n\t\t\t\t\t\t** (-Beta*abs(self.G.node[edge[0]]['height'] \n\t\t\t\t\t\t\t- self.G.node[edge[1]]['height'])))\n\t\t\t\t\tif DEBUG:\n\t\t\t\t\t\tprint self.G[edge[0]][edge[1]]['weight']\n\t\t\telse:\n\t\t\t\tfor edge in self.G.edges():\n\t\t\t\t\tself.G[edge[0]][edge[1]]['weight']=1\n\n\t\t\tprint (\"the number of edges in this simulation will be \" + \n\t\t\t\tstr(len(self.G.edges())) + \" And the number of agents will be \"\n\t\t\t\t + str(len(self.G.nodes())))\n\n\t\t\tfor x in self.G.nodes():\n\t\t\t\tnodeColor.append(int(self.G.node[x]['height']))\n\t\t\t\n\t\t\tif SHOW == 1:\n\t\t\t\tcolors = cm.rainbow(np.linspace(0, 1, len(nodeColor)))\n\t\t\t\tfig = plt.figure()\n\n\t\t\t\telarge = [(u,v) for (u,v,d) \n\t\t\t\tin self.G.edges(data=True) \n\t\t\t\tif d['weight'] >=0.05]\n\n\t\t\t\tesmall = [(u,v) for (u,v,d) \n\t\t\t\tin self.G.edges(data=True)\n\t\t\t\tif d['weight'] <0.05]\n\n\t\t\t\tnx.draw_networkx_edges(self.G, \n\t\t\t\t\tpos={i:i for i in self.G.nodes()}, \n\t\t\t\t\tedgelist=elarge, \n\t\t\t\t\twidth=2)\n\t\t\t\tnx.draw_networkx_edges(self.G, \n\t\t\t\t\tpos={i:i for i in self.G.nodes()}, \n\t\t\t\t\tedgelist=esmall, width=2, alpha=0.5,edge_color='b',\n\t\t\t\t\tstyle='dashed')\n\t\t\t\t\n\t\t\t\tnx.draw_networkx_nodes(self.G, \n\t\t\t\t\tpos={i:i for i in self.G.nodes()}, node_color=nodeColor, \n\t\t\t\t\tnode_cmap=plt.cm.summer, node_size=20)\n\t\t\t\tplt.xlabel('X_grid identifier')\n\t\t\t\tplt.ylabel('Y_grid identifier')\n\t\t\t\tplt.title('The grid\\nGenerated on the basis of given DEM')\n\t\t\t\tplt.show() # display\n\t\t\tself.len = len(self.G.nodes())\n\t\t\n\n\t\ti = 0\t\n\n\t\tif id != COMPLETE:\n\t\t\t#Associates nodes on the graph with agents\n\n\t\t\tfor n in self.G:\n\t\t\t\tself.G.node[n]['agent'] = agent[i]\n\t\t\t\ti += 1\n\t\t\n\t\tif id == GRIDONMAP:\n\t\t\tif SHOW == 1:\n\t\t\t\t#Shows the edgeweight histogram\n\n\t\t\t\tedgeWeights = [d['weight'] for (u,v,d)\n\t\t\t\tin self.G.edges(data=True)]\n\t\t\t\tbins = np.arange(0.1,1,0.05)\n\t\t\t\tplt.hist(edgeWeights, bins, histtype='bar', rwidth=0.8, \n\t\t\t\t\tlabel='Edge Weights')\n\t\t\t\tplt.xlabel('Edge Weights')\n\t\t\t\tplt.ylabel('Frequency')\n\t\t\t\tplt.title(\"Edge Weights\\nThe frequency with witch a given \"\n\t\t\t\t\t\"weight is assigned given this DEM distribution\")\n\t\t\t\tplt.show()\n\t\t\t\tif DEBUG == 1:\n\t\t\t\t\torderedWeights = sorted(edgeWeights)\n\t\t\t\t\txs = range(len(edgeWeights))\n\t\t\t\t\tfig2 = plt.figure()\n\t\t\t\t\tplt.scatter(xs, orderedWeights)\n\t\t\t\t\tplt.show()\n\t\n\tdef Select(self, agent):\n\t\t'''\n\t\tThe function defines the procedure for the selection of a speaker\n\t\thearer couple\n\t\t'''\n\n\t\tif self.tipo == COMPLETE:\n\t\t\tcouple = random.sample(agent,2)\n\t\t\treturn couple\n\n\t\telif(self.tipo == GRID2DBAND):\n\t\t\ts = random.choice(self.G.nodes())\n\t\t\tif(not self.G.neighbors(s)):\n\t\t\t\treturn [None, None]\n\t\t\tw = self.G.degree(s,'weight')\n\t\t\tr = random.uniform(0.0,w)\n\t\t\tE = self.G.edges(s)\n\t\t\tsum = 0.0\n\t\t\tfor a in E:\n\t\t\t\tsum += self.G[a[0]][a[1]]['weight']\n\t\t\t\tif sum >= r:\n\t\t\t\t\tbreak\n\t\t\tif s == a[0]:\n\t\t\t\th = a[1]\n\t\t\telse:\n\t\t\t\th = a[0]\n\t\t\treturn [ self.G.node[s]['agent'], self.G.node[h]['agent']]\n\t\telif self.tipo == GRIDONMAP:\n\t\t\ts = random.choice(self.G.nodes())\n\t\t\tif(not self.G.neighbors(s)):\n\t\t\t\treturn [None, None]\n\t\t\tmapping={key[:2]: key[2] for key \n\t\t\tin self.G.edges(s, data='weight')}\n\t\t\tlink=nx.utils.random_sequence.weighted_choice(mapping)\n\t\t\tif link[0] == s:\n\t\t\t\th = link[1]\n\t\t\telse:\n\t\t\t\th = link[0]\n\t\telse:\n\t\t\ts = random.choice(self.G.nodes())\n\t\t\tif(not self.G.neighbors(s)):\n\t\t\t\treturn [None, None]\n\t\t\th = random.choice(self.G.neighbors(s))\n\t\treturn [ self.G.node[s]['agent'], self.G.node[h]['agent'] ]",
			"file": "Agent.py",
			"file_size": 8289,
			"file_write_time": 131226348838628957,
			"settings":
			{
				"buffer_size": 9103,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Game.py",
			"settings":
			{
				"buffer_size": 12279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/donrog/personal_python/textbox.py",
			"settings":
			{
				"buffer_size": 623,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import sys"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "instal",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"mater",
				"Material Theme: Activate theme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"enco",
				"HTML: Encode Special Characters"
			],
			[
				"conve",
				"Convert Case: Lower Case"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/donrog/tesiLaurea"
	],
	"file_history":
	[
		"/home/donrog/Downloads/Connecting Networks.py",
		"/home/donrog/tesiLaurea/NG.py",
		"/home/donrog/tesiLaurea/Game.py",
		"/home/donrog/personal_python/RoamTry",
		"/home/donrog/tesiLaurea/Selection_prob.py",
		"/home/donrog/tesiLaurea/Postprocessing/analisys.py",
		"/home/donrog/tesiLaurea/boxplot.py",
		"/home/donrog/tesiLaurea/Gpraphplot.py",
		"/home/donrog/tesiLaurea/Boxplot_cluster_sizes.py",
		"/home/donrog/tesiLaurea/NG",
		"/home/donrog/tesiLaurea/Gpraphplot.",
		"/home/donrog/tesiLaurea/runner.sh",
		"/home/donrog/tesiLaurea/plotter.py",
		"/home/donrog/tesiLaurea/mapMakeR/languagesOfTheWorld/archive/glottolog_ipython.py",
		"/home/donrog/tesiLaurea/Selection",
		"/home/donrog/tesiLaurea/mapMakeR/etymologyMaps/generateMap_v1.py",
		"/home/donrog/tesiLaurea/mapMakeR/etymologyMaps/resources/dictionary_template.txt",
		"/home/donrog/tesiLaurea/mapMakeR/etymologyMaps/resources/language_codes_dictionary.txt",
		"/home/donrog/tesiLaurea/Clusterings_script_plot.txt",
		"/home/donrog/tesiLaurea/Postprocessing/NG.py",
		"/home/donrog/personal_python/Nephero_Game.py",
		"/home/donrog/tesiLaurea/weightPlot.py",
		"/home/donrog/tesiLaurea/Agent.py",
		"/home/donrog/tesiLaurea/objectDump.py",
		"/home/donrog/tesiLaurea/gridItalia.py",
		"/home/donrog/tesiLaurea/Postprocessing/medie.py",
		"/home/donrog/tesiLaurea/clustreing.dat",
		"/home/donrog/tesiLaurea/Game.pyc",
		"/home/donrog/tesiLaurea/Quick_plot.py",
		"/home/donrog/tesiLaurea/analisys.py",
		"/home/donrog/tesiLaurea/Script_palettes.py",
		"/home/donrog/tesiLaurea/AverageCOMPLETEù.py",
		"/home/donrog/tesiLaurea/examplegraph.py",
		"/home/donrog/tesiLaurea/CompleteNDW8000.png",
		"/home/donrog/tesiLaurea/Beta_analysis_5000/analisys.py",
		"/mnt/New Volume/Downloads D/Game.py",
		"/mnt/New Volume/Downloads D/NG.py",
		"/home/donrog/tesiLaurea/singleplot.py",
		"/home/donrog/tesiLaurea/runner_prob.sh",
		"/home/donrog/tesiLaurea/threshhold_object_dump.py",
		"/mnt/New Volume/Dropbox/Applicazioni/ShareLaTeX/Tesi Magistrale/arsclassica/ArsClassica.tex",
		"/mnt/New Volume/Dropbox/Applicazioni/ShareLaTeX/Tesi Magistrale/arsclassica/Chapters/Introduzione.tex",
		"/home/donrog/tesiLaurea/Comuni_altitudine",
		"/home/donrog/tesiLaurea/ccf65d4f5106c2cdc70e-012038da7049d7a723a8134e8eed9534903449d0/gistfile1.py",
		"/home/donrog/Agent.py",
		"/home/donrog/tesiLaurea/DEM.jpgw",
		"/home/donrog/basemap.py",
		"/home/donrog/tesiLaurea/weightchoice.py",
		"/home/donrog/tesiLaurea/randomWightChoice.py",
		"/home/donrog/tesiLaurea/Agent",
		"/home/donrog/tesiLaurea/outpud.dat",
		"/home/donrog/tesiLaurea/Agent2.py",
		"/home/donrog/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/donrog/tesiLaurea/README.md",
		"/home/donrog/tesiLaurea/result.dat",
		"/home/donrog/tesiLaurea/result",
		"/home/donrog/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/donrog/python_work/networkx_tutorial.py"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"i ",
			"print",
			"i",
			"hist",
			":2 ",
			":2",
			"plot",
			"\"n",
			"\"t",
			"differe",
			"colo",
			"sns",
			"differ",
			"i)",
			"targ",
			"number",
			"time",
			"number",
			"name",
			"differen",
			"choi",
			"4",
			"show",
			"spars",
			"altitudini",
			"values",
			"- ",
			"-",
			" 9 ",
			" 9",
			".",
			",",
			".g.",
			"f.G",
			"float",
			"scatter",
			"Wid",
			"as",
			"map",
			"int(",
			"int",
			"75"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			":(log(1-($2)/114)) ",
			":(log(1-($2)/114))",
			"",
			".",
			".G.",
			"f.topology.g",
			"plot",
			"float",
			"DELTAS"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/donrog/personal_python/RoamTry.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4345,
						"regions":
						{
						},
						"selection":
						[
							[
								543,
								543
							]
						],
						"settings":
						{
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Lighter.tmTheme",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "NG.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1460,
						"regions":
						{
						},
						"selection":
						[
							[
								1460,
								1460
							]
						],
						"settings":
						{
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Lighter.tmTheme",
							"rulers":
							[
								78
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Agent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9103,
						"regions":
						{
						},
						"selection":
						[
							[
								7764,
								7764
							]
						],
						"settings":
						{
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Lighter.tmTheme",
							"rulers":
							[
								78
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Game.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12279,
						"regions":
						{
						},
						"selection":
						[
							[
								8883,
								8883
							]
						],
						"settings":
						{
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Lighter.tmTheme",
							"rulers":
							[
								78
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8640.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/donrog/personal_python/textbox.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 623,
						"regions":
						{
						},
						"selection":
						[
							[
								623,
								623
							]
						],
						"settings":
						{
							"auto_name": "import sys",
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Lighter.tmTheme",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 118.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "TesiMagistrale.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"re",
				"tesiLaurea/README.md"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 218.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
